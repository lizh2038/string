#include <stdio.h>
#include <string.h>

#define MAX_LENGTH 20

char* binary_sum(char* str1, char* str2);

int main()
{
    char str1[MAX_LENGTH];
    char str2[MAX_LENGTH];
    printf("Please input the first string\n");
    fgets(str1, MAX_LENGTH, stdin);
    printf("Please input the second string\n");
    fgets(str2, MAX_LENGTH, stdin);
    printf("The sum is %s\n", binary_sum(str1, str2));
}

char* binary_sum(char* str1, char* str2)
{
    int len1 = strlen(str1) - 1; // 计算字符串长度（减一是为了去掉末尾的换行符）
    int len2 = strlen(str2) - 1;
    int max_len = len1 > len2 ? len1 : len2; // 计算两个字符串中较长的一个的长度
    static char result[MAX_LENGTH + 1]; // 静态数组用于存储结果
    result[max_len + 1] = '\0'; // 在结果字符串末尾添加空字符
    int carry = 0; // 进位标志

    for (int i = 0; i < max_len; i++)
    {
        int a = i < len1 ? str1[len1 - i - 1] - '0' : 0; // 获取第一个字符串中对应位置上的数字（如果超出范围则为零）
        int b = i < len2 ? str2[len2 - i - 1] - '0' : 0; // 获取第二个字符串中对应位置上的数字（如果超出范围则为零）
        int sum = a + b + carry; // 计算当前位置上的和（包括进位）
        result[max_len - i] = sum % 2 + '0'; // 计算当前位置上的结果
        carry = sum / 2; // 计算进位
    }
    if (carry == 1) // 如果最高位有进位
        result[0] = '1'; // 在结果字符串最前面添加 '1'
    else
        result[0] = ' '; // 否则在结果字符串最前面添加空格（为了对齐）

    return result;
}
